---
title: "Hands-on exercise 05-2: Visual Correlation Analysis"
author: "XieHaoyang"
format: html
execute:
  warning: false
---

# Visual Correlation Analysis

## Getting Started

### Installing and Launching R Packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

### Importing Data

```{r}
wine <- read_csv("data/wine_quality.csv")
```

## **Building Correlation Matrix: *pairs()* method**

### Building a basic correlation matrix

```{r}
pairs(wine[,1:11])
```

The required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function.

```{r}
pairs(wine[,2:12])
```

### Drawing the lower corner

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

Similarly, we can display the upper half of the correlation matrix by using the code chun below.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

### Including with correlation coefficients

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

## Visualising Correlation Matrix: ggcormat()

### The basic plot

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

Things to learn from the code chunk above:

cor.vars argument is used to compute the correlation matrix needed to build the corrgram. ggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: , , , , , , , , , .corrmethodp.matsig.levelggthemecolorslabpchlegend.titledigits The sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.

```{r}
ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
```

### Building multiple plots

```{r}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

Things to learn from the code chunk above:

to build a facet plot, the only argument needed is .grouping.var Behind group_ggcorrmat(), patchwork package is used to create the multiplot. argument provides a list of additional arguments passed to patchwork::wrap_plots, except for guides argument which is already separately specified earlier.plotgrid.args Likewise, argument is calling plot annotation arguments of patchwork package.annotation.args

## Visualising Correlation Matrix using corrplot Package

### Getting started with corrplot

Before we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.

In the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.

```{r}
wine.cor <- cor(wine[, 1:11])
```

Next, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.

```{r}
corrplot(wine.cor)
```

### Working with visual geometrics

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

### Working with layout

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

The default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

### Working with mixed layout

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The code chunk used to plot the corrgram are shown below.

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

### Combining corrgram with the significant test

With corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

We can then use the p.mat argument of corrplot function as shown in the code chunk below.

```{r}
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

### Reorder a corrgram

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

### Reordering a correlation matrix using hclust

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```
